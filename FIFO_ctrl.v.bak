
`timescale 1ns/1ps	

module FIFO_ctrl(
	input		wire			clk,				// 100MHz
	input 	wire			reset_n,			//复位信号，低有效
	input		wire			AD_clk,			//FIFO采样时钟输入
	input		wire			AD_sample_en,	//AD采样使能
	input		wire			FIFO_EF,			//FIFO空标志,empty --> 0
	input		wire			FIFO_FF,			//FIFO满标志
	input		wire			FIFO_HF,			//FIFO半满标志 
	input		wire			FIFO_PAE,		//FIFO几乎空标志
	input		wire			FIFO_PAF,		//FIFO几乎满标志
	output	wire			FIFO_WCLK,		//FIFO写时钟
	output	wire			FIFO_RCLK,		//FIFO读时钟
	output	wire			FIFO_WEN,		//FIFO写使能,enable --> 0
	output	wire			FIFO_REN,		//FIFO读使能,enable --> 0
	output  	reg			MRS,				//FIFO复位,reset --> 0
	output	reg			OE					//FIFO输出时能,enable --> 0
	);

	
	always@(posedge clk or negedge reset_n)
	begin
		if(~reset_n)
		begin
			MRS <= 1'b0;
//			RCLK <= 1'b0;
			OE <= 1'b1;
		end
		else
		begin
			MRS <= 1'b1;
			OE <= 1'b0;
		end
	end
	
//测试程序：FIFO读比写延时一段时间
reg FIFO_READ_EN;
reg[9:0] cnt;
	always@(posedge clk)
	begin
		if(~reset_n)
		begin
			FIFO_READ_EN <= 1'b0;
			cnt <= 0;
		end
		else if(AD_sample_en)
		begin
			if(cnt <= 10'd1000)
			begin
				cnt <= cnt + 10'd1;
				FIFO_READ_EN <= 1'b0;
			end
			else
			begin
				FIFO_READ_EN <= 1'b1;
			end
		end
		else
		begin
			cnt <= 0;
			FIFO_READ_EN <= 1'b0;
		end
		
	end
	
assign FIFO_WCLK = AD_clk && AD_sample_en;
assign FIFO_RCLK = AD_clk && AD_sample_en;
assign FIFO_WEN = ~AD_sample_en;
assign FIFO_REN = ~AD_sample_en;
//assign FIFO_REN = ~FIFO_READ_EN;
//assign FIFO_REN = 1'b1;

endmodule